#given a list of actions,
#print the top likely lexicon
import collections
import numpy, scipy, matplotlib.pyplot as plt, sklearn, librosa, mir_eval, urllib
import random
from scipy.io.wavfile import write
import os


# using word-sequence or actions generated by ucs, build final lexicon candidates
def build_final_lexicon(word_sequence):
	lexicon = collections.Counter()
	for word in word_sequence:
		lexicon[word] += 1

	print("final lexicon is ", lexicon)
	return lexicon

# using final lexicon, generate examples for top 10 candidates by randomly selecting syllable from cluster
def generate_word_audio(segResults, numExamples, lexicon, topN, outputPath, outputFileName, fs):

	# sort final lexicon by most likely
	topKeys = sorted(lexicon.items(), key=lambda x: x[1], reverse = True)
	audioExamples = list()
	for i in range(topN): #just take the top few
		thisWord = topKeys[i][0]
		thisWordAudio = numpy.empty(0,)

		#generate numExamples examples for each word candidate
		for j in range(numExamples):
			for k in range(len(thisWord)):
				#randomly sample syllable from each cluster to create combined 'example'
				randomExample = random.choice(segResults[thisWord[k]])
				thisWordAudio = numpy.concatenate((thisWordAudio, randomExample))
			padding = 30000
			thisWordAudio = numpy.concatenate((thisWordAudio, [0 for _ in range(padding)])) #add padding
		audioExamples.append(thisWordAudio)

	for i in range(topN):
		out_file = outputPath + "/" + outputFileName + "/" + outputFileName + str(i) + ".wav"
		if not os.path.exists(os.path.dirname(out_file)):
			    try:
			        os.makedirs(os.path.dirname(out_file))
			    except OSError as exc: # Guard against race condition
			        if exc.errno != errno.EEXIST:
			            raise
		write(out_file, fs, audioExamples[i])